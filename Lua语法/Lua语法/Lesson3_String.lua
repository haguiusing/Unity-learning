print("**********字符串************")
str = "双引号字符串"
str2 = '单引号字符串'

--获取字符串的长度
print("**********字符串长度************")
s = "aBcdEfG字符串"
--一个汉字占3个长度
--英文字符 占1个长度
print(#s) --16

--string.len函数用于计算只包含 ASCII 字符串的长度
print(string.len(s))  --16

--utf8.len函数用于一般用与中文
--local myString = utf8.len("Hello, 世界!")
--print(myString)
--print(utf8.len(myString))  --报错，#计算方便

--local myString = "Hello, 世界!"
-- 计算字符串的长度（字符个数）
--local length1 = utf8.len(myString)
--print(length1) -- 输出 10

print("**********字符串多行打印************")
--lua中也是支持转义字符的
print("123\n123")
--使用中括号[[]]
s = [[我是
唐
老师
]]
print(s)

print("**********字符串拼接************")
--字符串拼接 通过..
print( "123" .. "456" )
print(type( "123" .. "456" .. "123" .. "456" ))
s1 = 111
s2 = 111
print(s1 .. s2)
print(type(s1 .. s2))

print(string.format("我是唐老狮，我今年%d岁了,%i", 18,1))
--匹配模式
--%d, %i :接受一个数字并将其转化为有符号的整数格式
--%f：接受一个数字并将其转化为浮点数格式(小数)，默认保留6位小数，不足位用0填充
--  特殊用法
--  %0.3f中的小数点右边的数字表示小数点后面保留多少位，
--      小数点前面的数字表示位数不足时的填充数，通用用0填充
--%a：与任何字符拼接
--%s：接受一个字符串并按照给定的参数格式化该字符串
--%x：接受一个数字并将其转化为小写的十六进制格式
--%X：接受一个数字并将其转化为大写的十六进制格式
--.......

str = string.format([[字符串：%s
整数：%d
小数：%f
十六进制数：%X]],"qweqwe",1,0.13,348)
print(str)

print(string.format("%0.6f",34.2344))

--%c - 接受一个数字,并将其转化为ASCII码表中对应的字符
print(string.format("%%c:%c",83))
--%d, %i - 接受一个数字并将其转化为有符号的整数格式
--%o - 接受一个数字并将其转化为八进制数格式
--%u - 接受一个数字并将其转化为无符号整数格式
--%x - 接受一个数字并将其转化为十六进制数格式,使用小写字母
--%X - 接受一个数字并将其转化为十六进制数格式,使用大写字母
--%e - 接受一个数字并将其转化为科学记数法格式,使用小写字母e
print(string.format("%e", 1000))
--%E - 接受一个数字并将其转化为科学记数法格式,使用大写字母E
--%f - 接受一个数字并将其转化为浮点数格式
--%g(%G) - 接受一个数字并将其转化为%e(%E,对应%G)及%f中较短的一种格式
print(string.format("%g", 100000000000000.0000))
--%q - 接受一个字符串并将其转化为可安全被Lua编译器读入的格式
print(string.format("%q", "One\nTwo"))
--%s - 接受一个字符串并按照给定的参数格式化该字符串
print(string.format("%s", "monkey"))
print(string.format("%7s", "monkey"))
print(string.format("%5.3s", "monkey"))

print("**********别的类型转字符串************")
a = true
print(tostring(a))

print("**********字符串提供的公共方法************")
str = "abCdefgCd"
--小写转大写的方法（不改变原字符串）
print(string.upper(str))
--大写转小写的方法（不改变原字符串）
print(string.lower(str))

--翻转字符串的方法（不改变原字符串）
print(string.reverse(str))

--字符串索引查找 string.find (str, substr, [init, [plain]])
--不存在则返回 nil
--init 指定了搜索的起始位置，默认为 1，可以一个负数，表示从后往前数的字符个数。
--plain 表示是否使用简单模式，默认为 false，true 只做简单的查找子串的操作，false 表示使用使用正则模式匹配。
print(string.find(str, "Cde"))  --输出开头和结尾

--截取字符串 string.sub(s,i,[j]) 
--s：要截取的字符串。
--i：截取开始位置。
--j：截取结束位置，默认为-1，最后一个字符。
print(string.sub(str, 3, 4))

--字符串重复
print(string.rep(str, 2))

--字符串修改 string.gsub(mainString,findString,replaceString,num)
--mainString 为要操作的字符串， findString 为被替换的字符，
--replaceString 要替换的字符，num 替换次数（可以忽略，则全部替换）
print(string.gsub(str, "Cd", "**"))  --输出修改后的字符串  修改次数

--字符转 ASCII码
a = string.byte("Lua", 1)
print(a)
--ASCII码 转字符
print(string.char(a))

--配对字符串 string.match(str, pattern, init) 无效
--寻找源字串str中的第一个配对. 参数init可选, 指定搜寻过程的起点, 默认为1。
--在成功配对时, 函数将返回配对表达式中的所有捕获结果; 如果没有设置捕获标记, 则返回整个配对字符串。
--当没有成功的配对时, 返回nil。
string.match("I have 2 questions for you.", "%d+ %a+")
string.format("%d, %q", string.match("I have 2 questions for you.", "(%d+) (%a+)"))

print("**字符串格式化**")
--字符串格式化 string.format()
--%c - 接受一个数字, 并将其转化为ASCII码表中对应的字符
--%d, %i - 接受一个数字并将其转化为有符号的整数格式
--%o - 接受一个数字并将其转化为八进制数格式
--%u - 接受一个数字并将其转化为无符号整数格式
--%x - 接受一个数字并将其转化为十六进制数格式, 使用小写字母
--%X - 接受一个数字并将其转化为十六进制数格式, 使用大写字母
--%e - 接受一个数字并将其转化为科学记数法格式, 使用小写字母e
--%E - 接受一个数字并将其转化为科学记数法格式, 使用大写字母E
--%f - 接受一个数字并将其转化为浮点数格式
--%g(%G) - 接受一个数字并将其转化为%e(%E, 对应%G)及%f中较短的一种格式
--%q - 接受一个字符串并将其转化为可安全被Lua编译器读入的格式
--%s - 接受一个字符串并按照给定的参数格式化该字符串

--为进一步细化格式, 可以在%号后添加参数. 参数将以如下的顺序读入:
--(1) 符号: 一个+号表示其后的数字转义符将让正数显示正号. 默认情况下只有负数显示符号.
--(2) 占位符: 一个0, 在后面指定了字串宽度时占位用. 不填时的默认占位符是空格.
--(3) 对齐标识: 在指定了字串宽度时, 默认为右对齐, 增加-号可以改为左对齐.
--(4) 宽度数值
--(5) 小数位数/字串裁切: 在宽度数值后增加的小数部分n, 若后接f(浮点数转义符, 如%6.3f)
--则设定该浮点数的小数只保留n位, 若后接s(字符串转义符, 如%5.3s)则设定该字符串只显示前n位.
string.format("%c", 83)                 -- 输出S
string.format("%+d", 17.0)              -- 输出+17
string.format("%05d", 17)               -- 输出00017
string.format("%o", 17)                 -- 输出21
string.format("%u", 3.14)               -- 输出3
string.format("%x", 13)                 -- 输出d
string.format("%X", 13)                 -- 输出D
string.format("%e", 1000)               -- 输出1.000000e+03
string.format("%E", 1000)               -- 输出1.000000E+03
string.format("%6.3f", 13)              -- 输出13.000
string.format("%q", "One\nTwo")         -- 输出"One\
                                        -- 　　Two"
string.format("%s", "monkey")           -- 输出monkey
string.format("%10s", "monkey")         -- 输出    monkey
string.format("%5.3s", "monkey")        -- 输出  mon

print("**********转义字符************")
--字符串转换双引号可以使用 \  (注释无效)
--\a 响铃(BEL)
print("1\a2")
--\b 退格(BS) ，将当前位置移到前一列
print("1\b2")
--\f 换页(FF)，将当前位置移到下页开头
print("1\f2")
--\n 换行(LF) ，将当前位置移到下一行开头
print("1\n2")
--\r 回车(CR) ，将当前位置移到本行开头
print("1\r2")
--\t 水平制表(HT) （跳到下一个TAB位置）
print("1\t2")
--\v 垂直制表(VT)
--print("1\v2")
--\\  代表一个反斜线字符''\'
print("1\\2")
--\' 代表一个单引号（撇号）字符
print("1\'2")
--\" 代表一个双引号字符
print("1\"2")
--\0 空字符(NULL)
print("1\0 2")
--\ddd 1到3位八进制数所代表的任意字符
--print("1\ddd2")
--\xhh 1到2位十六进制所代表的任意字符
--print("1\xhh2")

print("**********Lua支持的所有字符类************")
--单个字符(除 ^$()%.[]*+-? 外): 与该字符自身配对
--.(点): 与任何字符配对
--%a: 与任何字母配对
--%c: 与任何控制符配对(例如\n)
--%d: 与任何数字配对
--%l: 与任何小写字母配对
--%p: 与任何标点(punctuation)配对
--%s: 与空白字符配对
--%u: 与任何大写字母配对
--%w: 与任何字母/数字配对
--%x: 与任何十六进制数配对
--%z: 与任何代表0的字符配对
--%x(此处x是非字母非数字字符): 与字符x配对. 主要用来处理表达式中有功能的字符(^$()%.[]*+-?)的配对问题, 例如%%与%配对
--[数个字符类]: 与任何[]中包含的字符类配对. 例如[%w_]与任何字母/数字, 或下划线符号(_)配对
--[^数个字符类]: 与任何不包含在[]中的字符类配对. 例如[^%s]与任何非空白字符配对

--当上述的字符类用大写书写时, 表示与非此字符类的任何字符配对. 
--例如, %S表示与任何非空白字符配对.例如，'%A'非字母的字符:
print(string.gsub("hello, up-down!", "%A", "."))
--数字4不是字符串结果的一部分，他是gsub返回的第二个结果，代表发生替换的次数。

--'%' 用作特殊字符的转义字符，因此 '%.' 匹配点；'%%' 匹配字符 '%'。
--转义字符 '%'不仅可以用来转义特殊字符，还可以用于所有的非字母的字符。

--模式条目可以是：
-- 单个字符类匹配该类别中任意单个字符；
-- 单个字符类跟一个 '*'， 将匹配零或多个该类的字符。 这个条目总是匹配尽可能长的串；
-- 单个字符类跟一个 '+'， 将匹配一或更多个该类的字符。 这个条目总是匹配尽可能长的串；
-- 单个字符类跟一个 '-'， 将匹配零或更多个该类的字符。 和 '*' 不同， 这个条目总是匹配尽可能短的串；
-- 单个字符类跟一个 '?'， 将匹配零或一个该类的字符。 只要有可能，它会匹配一个；
-- %n， 这里的 n 可以从 1 到 9； 这个条目匹配一个等于 n 号捕获物（后面有描述）的子串。
-- %bxy， 这里的 x 和 y 是两个明确的字符； 这个条目匹配以 x 开始 y 结束， 且其中 x 和 y 保持 平衡 的字符串。 
--   意思是，如果从左到右读这个字符串，对每次读到一个 x 就 +1 ，读到一个 y 就 -1， 最终结束处的那个 y 是第一个记数到 0 的 y。 
--   举个例子，条目 %b() 可以匹配到括号平衡的表达式。
-- %f[set]， 指 边境模式； 这个条目会匹配到一个位于 set 内某个字符之前的一个空串， 且这个位置的前一个字符不属于 set 。 
--   集合 set 的含义如前面所述。 匹配出的那个空串之开始和结束点的计算就看成该处有个字符 '\0' 一样。

--模式：
-- 模式 指一个模式条目的序列。 在模式最前面加上符号 '^' 将锚定从字符串的开始处做匹配。 在模式最后面加上符号 '$' 将使匹配过程锚定到字符串的结尾。 
-- 如果 '^' 和 '$' 出现在其它位置，它们均没有特殊含义，只表示自身。

--捕获：
-- 模式可以在内部用小括号括起一个子模式； 这些子模式被称为 捕获物。 当匹配成功时，由 捕获物 匹配到的字符串中的子串被保存起来用于未来的用途。 
-- 捕获物以它们左括号的次序来编号。 例如，对于模式 "(a*(.)%w(%s*))" ， 字符串中匹配到 "a*(.)%w(%s*)" 的部分保存在第一个捕获物中 （因此是编号 1 ）； 
-- 由 "." 匹配到的字符是 2 号捕获物， 匹配到 "%s*" 的那部分是 3 号。
-- 作为一个特例，空的捕获 () 将捕获到当前字符串的位置（它是一个数字）。 
-- 例如，如果将模式 "()aa()" 作用到字符串 "flaaap" 上，将产生两个捕获物： 3 和 5 。