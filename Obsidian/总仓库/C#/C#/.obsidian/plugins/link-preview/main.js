/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => LinkPreviewPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  mySetting: "default",
  previewDelay: 50,
  enablePreview: true,
  maxPreviewHeight: 400,
  maxPreviewWidth: 600
};
var LinkPreviewPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    // Track active preview elements by link URL
    this.activeLinks = /* @__PURE__ */ new Map();
  }
  async onload() {
    await this.loadSettings();
    this.registerDomEvent(document, "mouseover", (evt) => {
      const target = evt.target;
      const linkEl = target.closest("a");
      if (!linkEl || !this.settings.enablePreview)
        return;
      if (linkEl.hasClass("external-link")) {
        const rect = linkEl.getBoundingClientRect();
        this.showPreview(linkEl, rect);
      }
    });
    this.addSettingTab(new LinkPreviewSettingTab(this.app, this));
  }
  /**
   * Clean up any remaining previews when plugin is disabled
   */
  onunload() {
    this.activeLinks.forEach((previewEl, linkId) => {
      previewEl.remove();
    });
    this.activeLinks.clear();
  }
  /**
   * Creates and shows a preview window for a link element
   * @param linkEl - The link element for which to create a preview
   * @param rect - The bounding rectangle of the link element
   */
  showPreview(linkEl, rect) {
    const url = linkEl.getAttribute("href");
    if (!url)
      return;
    const linkId = `preview-${url}`;
    if (this.activeLinks.has(linkId))
      return;
    const hoverEl = this.createPreviewElement(rect);
    const loadingEl = hoverEl.createDiv({ cls: "preview-loading" });
    loadingEl.setText("Loading preview...");
    const iframeWrapper = hoverEl.createDiv({ cls: "preview-iframe-wrapper" });
    const iframe = iframeWrapper.createEl("iframe", {
      attr: {
        src: url,
        style: "display: none; width: 100%; height: 100%; border: none;"
      }
    });
    iframe.addEventListener("load", () => {
      loadingEl.remove();
      iframe.style.display = "block";
    });
    iframe.addEventListener("error", () => {
      loadingEl.setText("Failed to load preview");
    });
    const cleanup = () => {
      this.activeLinks.delete(linkId);
      hoverEl.remove();
      linkEl.removeAttribute("data-preview-active");
    };
    let isLinkHovered = true;
    let isPreviewHovered = false;
    const removePreview = () => {
      if (!isLinkHovered && !isPreviewHovered) {
        cleanup();
      }
    };
    const handleLinkEnter = () => {
      isLinkHovered = true;
    };
    const handleLinkLeave = () => {
      isLinkHovered = false;
      setTimeout(removePreview, 100);
    };
    const handlePreviewEnter = () => {
      isPreviewHovered = true;
    };
    const handlePreviewLeave = () => {
      isPreviewHovered = false;
      removePreview();
    };
    linkEl.addEventListener("mouseenter", handleLinkEnter);
    linkEl.addEventListener("mouseleave", handleLinkLeave);
    hoverEl.addEventListener("mouseenter", handlePreviewEnter);
    hoverEl.addEventListener("mouseleave", handlePreviewLeave);
    this.activeLinks.set(linkId, hoverEl);
    document.body.appendChild(hoverEl);
  }
  /**
   * Creates the preview container element with proper positioning
   * @param rect - The bounding rectangle used for positioning
   * @returns HTMLElement configured as preview container
   */
  createPreviewElement(rect) {
    return createEl("div", {
      cls: "hover-popup",
      attr: {
        style: `
                    position: fixed;
                    left: ${rect.left}px;
                    top: ${rect.bottom + 5}px;
                    z-index: 1000;
                    width: ${this.settings.maxPreviewWidth}px;
                    height: ${this.settings.maxPreviewHeight}px;
                `
      }
    });
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var LinkPreviewSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Enable preview").setDesc("Toggle link preview functionality").addToggle((toggle) => toggle.setValue(this.plugin.settings.enablePreview).onChange(async (value) => {
      this.plugin.settings.enablePreview = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Preview delay").setDesc("How long to wait before showing the preview (in milliseconds)").addText((text) => text.setPlaceholder("300").setValue(String(this.plugin.settings.previewDelay)).onChange(async (value) => {
      this.plugin.settings.previewDelay = Number(value);
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Maximum preview height").setDesc("Maximum height of the preview window (in pixels)").addText((text) => text.setPlaceholder("300").setValue(String(this.plugin.settings.maxPreviewHeight)).onChange(async (value) => {
      this.plugin.settings.maxPreviewHeight = Number(value);
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Maximum preview width").setDesc("Maximum width of the preview window (in pixels)").addText((text) => text.setPlaceholder("400").setValue(String(this.plugin.settings.maxPreviewWidth)).onChange(async (value) => {
      this.plugin.settings.maxPreviewWidth = Number(value);
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
